CgEwEvEMCghEYlZpZXdlchIFMC4wLjQYACL0BHsKICAibmFtZSI6ICJBY3Rpb24iLAogICJwbGFjZXMiOiBbCiAgICB7CiAgICAgICJpZCI6ICJTdGFydEV2ZW50XzA3MWhzOGciLAogICAgICAibmFtZSI6ICJzdGFydCIsCiAgICAgICJlbSI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiRW5kRXZlbnRfMTZ6aXFpZSIsCiAgICAgICJuYW1lIjogImVuZCIsCiAgICAgICJlbSI6IHRydWUKICAgIH0KICBdLAogICJ0cmFuc2l0aW9ucyI6IFsKICAgIHsKICAgICAgImlkIjogIlRhc2tfMGIzcTV6ciIsCiAgICAgICJuYW1lIjogImFjdGlvbiIsCiAgICAgICJndWFyZCI6ICJ0cnVlIiwKICAgICAgIm9wZXJhdGlvbiI6ICJpZGVudGl0eSIKICAgIH0KICBdLAogICJhcmNzIjogWwogICAgewogICAgICAiaWQiOiAiU2VxdWVuY2VGbG93XzE2NTk2YmkiLAogICAgICAiZnJvbSI6ICJTdGFydEV2ZW50XzA3MWhzOGciLAogICAgICAidG8iOiAiVGFza18wYjNxNXpyIiwKICAgICAgIndlaWdodCI6IDEKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJTZXF1ZW5jZUZsb3dfMGx1MWt0eCIsCiAgICAgICJmcm9tIjogIlRhc2tfMGIzcTV6ciIsCiAgICAgICJ0byI6ICJFbmRFdmVudF8xNnppcWllIiwKICAgICAgIndlaWdodCI6IDEKICAgIH0KICBdCn0q5Ad7CiAgIm9wZXJhdGlvbnMiOiBbCiAgICB7CiAgICAgICJsYWJlbCI6ICJhY3Rpb24iLAogICAgICAib3JibGV0IjogInNjcmlwdCIsCiAgICAgICJtZXRob2QiOiAiU2NyaXB0T3BlcmF0aW9uIiwKICAgICAgImFyZyI6ICIjRGJWaWV3ZXIoKS5hY3Rpb24oKSIKICAgIH0KICBdLAogICJmdW5jdGlvbnMiOiBbXSwKICAiaW1wb3J0cyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiRGJWaWV3ZXIiLAogICAgICAidXJsIjogIkRiVmlld2VyIgogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiQWVvbkNvcmVDb25uZWN0b3JzIiwKICAgICAgInVybCI6ICJBZW9uQ29yZUNvbm5lY3RvcnMuZGxsIgogICAgfQogIF0sCiAgImd1YXJkcyI6IFtdLAogICJzdG9yZSI6IHsKICAgICJzdG9yZVR5cGUiOiAxLAogICAgInN0b3JlQXJnIjogIiIKICB9LAogICJ0cmFuc2l0aW9uQ29uZmlnIjogWwogICAgewogICAgICAidHJhbnNpdGlvbiI6ICJhY3Rpb24iLAogICAgICAicHJvcGVydGllcyI6IFsKICAgICAgICB7CiAgICAgICAgICAia2V5IjogIm92ZXJyaWRlT3BlcmF0aW9uIiwKICAgICAgICAgICJ2YWx1ZSI6ICJhY3Rpb24iCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAia2V5IjogImFlb25Vc2VyIiwKICAgICAgICAgICJ2YWx1ZSI6ICIhW0VBQUFBRUdjaEZEMk4zVFZCbUxSQTR4ejNNUmpHOHhaSldiKzdSRlJEVnVPMHgwM3crMWV0NVNtdndOaXZWYkJpcjZucWc9PV0iCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAicGxhY2VDb25maWciOiBbXSwKICAiZXhjZXB0aW9uU3RyYXRlZ3kiOiAiKGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGV4Y2VwdGlvbjogZXhjZXB0aW9uLFxuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAgc2Vzc2lvbjogc3RsKCkuanNvbihzZXNzaW9uKSxcbiAgICBtYXJraW5nczogUi5tYXAoZnVuY3Rpb24oaSl7cmV0dXJuIGkuVG9TdHJpbmcoKTt9LCBtYXJraW5ncylcbiAgfTtcbn0pKCkiCn0ioBMKCERiVmlld2VyEpMTZnVuY3Rpb24oKSB7CglsZXQgc2VydmljZSA9IHt9OwoJCglzZXJ2aWNlLmFjdGlvbiA9IGZ1bmN0aW9uKCkgewoJICAgIHBheWxvYWQgPSBzdGwoKS5qc29uKHBheWxvYWQpOwoJICAgIAoJICAgIGxldCBfYmFzZVVybCA9ICJodHRwczovL2JsYWNrb3JjaGlkLm5sIjsKCSAgICBsZXQgdGFyZ2V0ID0gcGF5bG9hZC50YXJnZXQ7CgkgICAgCgkgICAgLy9mZXRjaCByb3dzCgkgICAgbGV0IGRiID0gbmV3IEFlb25Db3JlQ29ubmVjdG9ycygpLmdldFR5cGVJbnN0YW5jZSgiU3FsaXRlQ29ubmVjdG9yIik7CgkgICAgZGIuU2V0Q29ubmVjdGlvblN0cmluZygiVVJJPWZpbGU6L2hvbWUvYXBwL2RhdGEvIiArIHBheWxvYWQuZGIpOwoJICAgIGxldCBxdWVyeSA9ICJzZWxlY3QgcXVlc3Rpb24sYW5zd2VyIGZyb20gbGVhcm5pbmciOwoJICAgIC8vbGV0IHF1ZXJ5ID0gInNlbGVjdCBxdWVzdGlvbixhbnN3ZXIgZnJvbSBsZWFybmluZyBsaW1pdCAiICsgcGF5bG9hZC5xdWFudGl0eTsKCSAgICBsZXQgcm93cyA9IEpTT04ucGFyc2UoZGIuc2VsZWN0KHF1ZXJ5KS5Ub1N0cmluZygpKTsKCSAgICAKCSAgICAvL3NlbmQgb3JwaGFuZWQgZmxhc2hmb3JtCgkgICAgbGV0IHNjaGVtYSA9IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0YWJsZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiYW5zd2VyIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJyZXF1aXJlZCI6IFtdCiAgICAgICAgfTsKCSAgICBsZXQgZm9ybSA9IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAidGVtcGxhdGUiLAogICAgICAgICAgICAidGVtcGxhdGUiOiAiPGgzPiIrcGF5bG9hZC5kYisiPC9oMz48aDQ+KHt7bW9kZWwudGFibGUubGVuZ3RofX0gZW50cmllcyk8L2g0Pjx0YWJsZSBib3JkZXI9MT48dHIgbmctcmVwZWF0PVwiYyBpbiBtb2RlbC50YWJsZVwiPjx0ZD57e2MucXVlc3Rpb259fTwvdGQ+PHRkPnt7Yy5hbnN3ZXJ9fTwvdGQ+PC90cj48L3RhYmxlPiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1dHRvbiIsCiAgICAgICAgICAgICJ0aXRsZSI6ICJTdWJtaXQiLAogICAgICAgICAgICAic3R5bGUiOiAiYnRuLXByaW1hcnkiLAogICAgICAgICAgICAib25DbGljayI6ICJjb25maXJtKHRoZUZvcm0pIgogICAgICAgICAgfQogICAgICAgIF07CgkgICAgbGV0IG1vZGVsID0gewoJICAgICAgICB0YWJsZTogcm93cwoJICAgIH07CgkgICAgCgkgICAgbGV0IHZhdWx0ID0gbmV3IEFlb25Db3JlQ29ubmVjdG9ycygpLmdldFR5cGVJbnN0YW5jZSgiVmF1bHRDb25uZWN0b3IiKTsKCSAgICBsZXQgcHdkID0gc2Vzc2lvbi5nZXQoImFlb25Vc2VyIikuVmFsdWU7CiAgICAgICAgbGV0IF9hZW9uVXNlciA9IHZhdWx0CiAgICAgICAgCS5CYXNlVXJsKCJodHRwczovL2JsYWNrb3JjaGlkLm5sOjgyMDAvdjEiKQogICAgICAgIAkuVXNlcigiYWVvbiIpCiAgICAgICAgCS5QYXNzd29yZChwd2QpCiAgICAgICAgCS5Vc2VyUGFzc3dvcmRMb2dpblRva2VuKCk7CgkgICAgCgkgICAgbGV0IGZsYXNoRm9ybUNvbm5lY3RvciA9IEFlb25Db3JlQ29ubmVjdG9ycygpLmdldFR5cGVJbnN0YW5jZSgiRmxhc2hGb3JtQ29ubmVjdG9yIik7CgkgICAgbGV0IHJlc3VsdCA9IGZsYXNoRm9ybUNvbm5lY3RvcgoJICAgICAgICAgICAgLlNldEJhc2VVcmwoX2Jhc2VVcmwpCgkgICAgICAgICAgICAuU2V0QWVvblVzZXIoX2Flb25Vc2VyKQoJICAgICAgICAgICAgLlNldEFlb25QYXRoKCJhZW9uIikKCSAgICAgICAgICAgIC5TZXRTdWJqZWN0KHBheWxvYWQuZGIgKyAiIG92ZXJ2aWV3IikKCSAgICAgICAgICAgIC5BZGRUYXJnZXQodGFyZ2V0KQoJICAgICAgICAgICAgLk1lc3NhZ2VGcm9tU291cmNlKHN0bCgpLm9iaihzY2hlbWEpLCBzdGwoKS5qYXJyYXkoZm9ybSksIEpPYmplY3QuUGFyc2UoSlNPTi5zdHJpbmdpZnkobW9kZWwpKSwgImluc3RhbmNlSWQiLCAibm93aGVyZSIpOwoJICAgIAoJICAgIAoJICAgIHJldHVybiByb3dzOwoJfTsKCXJldHVybiBzZXJ2aWNlOwp9