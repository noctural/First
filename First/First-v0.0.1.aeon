CgEwErcKCgVGaXJzdBIFMC4wLjEYACL6BHsKICAibmFtZSI6ICJTaW5nbGVBY3Rpb24iLAogICJwbGFjZXMiOiBbCiAgICB7CiAgICAgICJpZCI6ICJTdGFydEV2ZW50XzA1aHZ0NjAiLAogICAgICAibmFtZSI6ICJzdGFydCIsCiAgICAgICJlbSI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAiaWQiOiAiRW5kRXZlbnRfMGl0cWVzOSIsCiAgICAgICJuYW1lIjogImVuZCIsCiAgICAgICJlbSI6IHRydWUKICAgIH0KICBdLAogICJ0cmFuc2l0aW9ucyI6IFsKICAgIHsKICAgICAgImlkIjogIlRhc2tfMG92eDByMCIsCiAgICAgICJuYW1lIjogImFjdGlvbiIsCiAgICAgICJndWFyZCI6ICJ0cnVlIiwKICAgICAgIm9wZXJhdGlvbiI6ICJpZGVudGl0eSIKICAgIH0KICBdLAogICJhcmNzIjogWwogICAgewogICAgICAiaWQiOiAiU2VxdWVuY2VGbG93XzE5bTc1dmYiLAogICAgICAiZnJvbSI6ICJTdGFydEV2ZW50XzA1aHZ0NjAiLAogICAgICAidG8iOiAiVGFza18wb3Z4MHIwIiwKICAgICAgIndlaWdodCI6IDEKICAgIH0sCiAgICB7CiAgICAgICJpZCI6ICJTZXF1ZW5jZUZsb3dfMDVyOXoyMiIsCiAgICAgICJmcm9tIjogIlRhc2tfMG92eDByMCIsCiAgICAgICJ0byI6ICJFbmRFdmVudF8waXRxZXM5IiwKICAgICAgIndlaWdodCI6IDEKICAgIH0KICBdCn0qpwV7CiAgIm9wZXJhdGlvbnMiOiBbCiAgICB7CiAgICAgICJsYWJlbCI6ICJhY3Rpb24iLAogICAgICAib3JibGV0IjogInNjcmlwdCIsCiAgICAgICJtZXRob2QiOiAiU2NyaXB0T3BlcmF0aW9uIiwKICAgICAgImFyZyI6ICIjRmlyc3QoKS5hY3Rpb24oKSIKICAgIH0KICBdLAogICJmdW5jdGlvbnMiOiBbXSwKICAiaW1wb3J0cyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiRmlyc3QiLAogICAgICAidXJsIjogIkZpcnN0IgogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiQWVvbkNvcmVDb25uZWN0b3JzIiwKICAgICAgInVybCI6ICJBZW9uQ29yZUNvbm5lY3RvcnMuZGxsIgogICAgfQogIF0sCiAgImd1YXJkcyI6IFtdLAogICJzdG9yZSI6IHsKICAgICJzdG9yZVR5cGUiOiAxLAogICAgInN0b3JlQXJnIjogIiIKICB9LAogICJ0cmFuc2l0aW9uQ29uZmlnIjogW10sCiAgInBsYWNlQ29uZmlnIjogW10sCiAgImV4Y2VwdGlvblN0cmF0ZWd5IjogIihmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBleGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgIHNlc3Npb246IHN0bCgpLmpzb24oc2Vzc2lvbiksXG4gICAgbWFya2luZ3M6IFIubWFwKGZ1bmN0aW9uKGkpe3JldHVybiBpLlRvU3RyaW5nKCk7fSwgbWFya2luZ3MpXG4gIH07XG59KSgpIgp9IqIBCgVGaXJzdBKYAWZ1bmN0aW9uKCkgewoJbGV0IHNlcnZpY2UgPSB7fTsKCQoJc2VydmljZS5hY3Rpb24gPSBmdW5jdGlvbigpIHsKCSAgICBwYXlsb2FkID0gc3RsKCkuanNvbihwYXlsb2FkKTsKCSAgICAKCSAgICByZXR1cm4gcGF5bG9hZDsKCX07CgkKCXJldHVybiBzZXJ2aWNlOwp9